========================================================================================================
===  Tidy report for :C:\Users\mrjak\Documents\GitHub\AutoCharts\AutoCharts.au3
========================================================================================================

00001    #Region ;**** Directives created by AutoIt3Wrapper_GUI ****
00002    #AutoIt3Wrapper_Icon=assets\GUI_Menus\programicon_hxv_icon.ico
00003    #AutoIt3Wrapper_Outfile=AutoCharts.exe
00004    #AutoIt3Wrapper_UseX64=n
00005    #AutoIt3Wrapper_Res_Description=AutoCharts 3.0.0
00006    #AutoIt3Wrapper_Res_Fileversion=3.0.0.1
00007    #AutoIt3Wrapper_Res_Fileversion_AutoIncrement=p
00008    #AutoIt3Wrapper_Res_ProductName=AutoCharts
00009    #AutoIt3Wrapper_Res_ProductVersion=3.0.0
00010    #AutoIt3Wrapper_Res_CompanyName=Jakob Bradshaw Productions
00011    #AutoIt3Wrapper_Res_LegalCopyright=Â© 2021 Jakob Bradshaw Productions
00012    #AutoIt3Wrapper_Res_SaveSource=y
00013    #AutoIt3Wrapper_Res_Language=1033
00014    #AutoIt3Wrapper_Res_requestedExecutionLevel=asInvoker
00015    #AutoIt3Wrapper_Res_HiDpi=y
00016    #AutoIt3Wrapper_Add_Constants=n
00017    #AutoIt3Wrapper_AU3Check_Stop_OnWarning=y
00018    #AutoIt3Wrapper_AU3Check_Parameters=-w 1 -v 1
00019    #AutoIt3Wrapper_Run_Tidy=y
00020    #Tidy_Parameters=/gd
00021    #AutoIt3Wrapper_Run_Au3Stripper=y
00022    #Au3Stripper_Parameters=/tl
00023    #EndRegion ;**** Directives created by AutoIt3Wrapper_GUI ****
00024    
00025    
00026    #Region ### GLOBAL Arrays and Variables
00027    
00028    Global $aCatalystCheck[24]
00029    Global $aRationalCheck[8]
00030    Global $aStrategyCheck[3]
00031    
00032    Global $FamilySwitch
00033    
00034    Global $CurrentFund
00035    Global $ini = 'settings.ini'
00036    Global $INPT_Name = IniRead($ini, 'Settings', 'UserName', '')
00037    Global $Select_Quarter = IniRead($ini, 'Settings', 'CurrentQuarter', '')
00038    Global $INPT_CurYear = IniRead($ini, 'Settings', 'CurrentYear', '')
00039    Global $FundFamily = ""
00040    Global $bDBVerified = IniRead($ini, 'Settings', 'DBVerified', 'False')
00041    Global $Select_Theme = IniRead($ini, 'Settings', 'UITheme', '')
00042    
00043    
00044    
00045    ;Predeclare the variables with dummy values to prevent firing the Case statements, only for GUI this time
00046    Global $GUI_UserSettings = 9999
00047    Global $INPT_DropboxFolder = 9999
00048    Global $BTN_Save = 9999
00049    Global $BTN_Cancel = 9999
00050    Global $BTN_SelectDBPath = 9999
00051    
00052    Global $Radio_Q1 = 4
00053    Global $Radio_Q2 = 4
00054    Global $Radio_Q3 = 4
00055    Global $Radio_Q4 = 4
00056    
00057    #EndRegion ### GLOBAL Arrays and Variables
00058    
00059    #Region ### Database Variables
00060    
00061    Global $CSVDataDir = "\assets\ChartBuilder\public\Data\Backups\"
00062    Global $DropboxDir = IniRead($ini, 'Settings', 'DropboxDir', '')
00063    Global $DatabaseDir = $DropboxDir & "\Marketing Team Files\AutoCharts_Database"
00064    
00065    
00066    #EndRegion ### Database Variables
00067    
00068    #include <Array.au3>
00069    #include <File.au3>
00070    #include <MsgBoxConstants.au3>
00071    #include <ButtonConstants.au3>
00072    #include <GUIConstantsEx.au3>
00073    #include <ProgressConstants.au3>
00074    #include <StaticConstants.au3>
00075    #include <TabConstants.au3>
00076    #include <WindowsConstants.au3>
00077    #include <EditConstants.au3>
00078    #include <GUIListBox.au3>
00079    #include <WinAPIFiles.au3>
00080    #include <AutoItConstants.au3>
00081    #include <FileConstants.au3>
00082    #include "Zip.au3"
00083    
00084    ;-------------------------------------------------------------------------------
00085    ; Main program that manages Logging
00086    ;
00087    ; This is the entry point to the DataLinker code.
00088    ;-------------------------------------------------------------------------------
00089    #include "src/Logger.au3"
00090    
00091    ;-------------------------------------------------------------------------------
00092    ; Main program that manages database sync functions
00093    ;
00094    ; This is the entry point to the database sync code.
00095    ;-------------------------------------------------------------------------------
00096    #include "src/Database_Sync.au3"
00097    
00098    ;-------------------------------------------------------------------------------
00099    ; Main program that houses all GUI events and controls
00100    ;
00101    ; This is the entry point to the GUI Wrapper code.
00102    ;-------------------------------------------------------------------------------
00103    #include "src/GUI_Wrapper.au3"
00104    
00105    ;-------------------------------------------------------------------------------
00106    ; Main program that manages DataLinker Functions
00107    ;
00108    ; This is the entry point to the DataLinker code.
00109    ;-------------------------------------------------------------------------------
00110    #include "src/DataLinker_Func.au3"
00111    
00112    
00113    
00114  +-Func CheckForSettingsMigrate()
00115  |  +-	If FileExists(@ScriptDir & "/settings-MIGRATE.ini") Then
00116  |  |    		FileDelete(@ScriptDir & "/settings-MIGRATE.ini")
00117  |  |    		_LogaInfo("Updated install detected.")
00118  |  |    		_Metro_MsgBox(0, "Thanks for upgrading!", "Thanks for upgrading AutoCharts!" & @CRLF & @CRLF & "Before you begin, please double check your settings have imported correctly.")
00119  |  +-	EndIf
00120  +-EndFunc   ;==>CheckForSettingsMigrate
00121    
00122  +-Func CheckForUpdate()
00123  |    	Run(@ScriptDir & "/AutoCharts_Updater.exe")
00124  +-EndFunc   ;==>CheckForUpdate
00125    
00126    ;Func CheckForUpdateSilent()
00127    ;Run(@ComSpec & " /c AutoCharts_Updater.exe -nogui", @AppDataDir & "/AutoCharts/", @SW_HIDE) ;~ @SW_HIDE Runs local server to create current fund's amcharts svgs.
00128    ;EndFunc   ;==>CheckForUpdateSilent
00129    
00130    CheckForSettingsMigrate()
00131    
00132    
00133    #Region ### Start Main Functions Region
00134    
00135  +-Func DetermineDates()
00136  |    	$Select_Quarter = IniRead($ini, 'Settings', 'CurrentQuarter', '')
00137  |    	$INPT_CurYear = IniRead($ini, 'Settings', 'CurrentYear', '')
00138  |    	Local $QtrToMonth
00139  |    	Local $DayNumber
00140  |    	Local $MonthNumber
00141  |    
00142  |  +-	If $Select_Quarter = 'Q1' Then
00143  |  |    		$QtrToMonth = "March"
00144  |  |    		$MonthNumber = "03"
00145  |  |    		$DayNumber = "31"
00146  |  +-	ElseIf $Select_Quarter = 'Q2' Then
00147  |  |    		$QtrToMonth = "June"
00148  |  |    		$MonthNumber = "06"
00149  |  |    		$DayNumber = "30"
00150  |  +-	ElseIf $Select_Quarter = 'Q3' Then
00151  |  |    		$QtrToMonth = "September"
00152  |  |    		$MonthNumber = "09"
00153  |  |    		$DayNumber = "30"
00154  |  +-	ElseIf $Select_Quarter = 'Q4' Then
00155  |  |    		$QtrToMonth = "December"
00156  |  |    		$MonthNumber = "12"
00157  |  |    		$DayNumber = "31"
00158  |  +-	Else
00159  |  |    		_Metro_MsgBox(0, "Error!", "A quarter has not been selected in the settings tab.")
00160  |  |    
00161  |  +-	EndIf
00162  |    
00163  |    	_LogaInfo("Determined quarter to be ~" & $Select_Quarter & "~ and current year to be ~" & $INPT_CurYear & "~") ; Write to the logfile
00164  |    
00165  |  +-	If FileExists($DatabaseDir & "\csv\Update_FactSheetDates.csv") Then
00166  |  |    		FileDelete($DatabaseDir & "\csv\Update_FactSheetDates.csv")
00167  |  +-	EndIf
00168  |    
00169  |    	;Create CSV Line by Line for Datalinker to read current year and quarter.
00170  |    
00171  |    	Local $file = $DatabaseDir & "\csv\Update_FactSheetDatesTEMP.csv"
00172  |    	Local $text = FileReadLine($file, 1)
00173  |    
00174  |    	$tout1 = StringReplace($text, 'Label,ID', 'Label,ID' & @CRLF)
00175  |    	FileWrite($DatabaseDir & "\csv\Update_FactSheetDates.csv", $tout1)
00176  |    
00177  |    	$text = FileReadLine($file, 2)
00178  |    
00179  |    	$tout1 = StringReplace($text, '03/31/2021,1', $MonthNumber & '/' & $DayNumber & '/' & $INPT_CurYear & ',1' & @CRLF)
00180  |    	FileWrite($DatabaseDir & "\csv\Update_FactSheetDates.csv", $tout1)
00181  |    
00182  |    	$text = FileReadLine($file, 3)
00183  |    
00184  |    	$tout1 = StringReplace($text, '"March 31, 2021",2', '"' & $QtrToMonth & ' ' & $DayNumber & ', ' & $INPT_CurYear & '",2' & @CRLF)
00185  |    	FileWrite($DatabaseDir & "\csv\Update_FactSheetDates.csv", $tout1)
00186  |    
00187  |    	$text = FileReadLine($file, 4)
00188  |    
00189  |    	$tout1 = StringReplace($text, 'Q1 2021,3', $Select_Quarter & ' ' & $INPT_CurYear & ',3' & @CRLF)
00190  |    	FileWrite($DatabaseDir & "\csv\Update_FactSheetDates.csv", $tout1)
00191  |    
00192  |    	$text = FileReadLine($file, 5)
00193  |    
00194  |    	$tout1 = StringReplace($text, 'March 2021,4', $QtrToMonth & ' ' & $INPT_CurYear & ',4' & @CRLF)
00195  |    	FileWrite($DatabaseDir & "\csv\Update_FactSheetDates.csv", $tout1)
00196  |    
00197  |    	$text = FileReadLine($file, 6)
00198  |    
00199  |    	$tout1 = StringReplace($text, '03/2021,5', $MonthNumber & '/' & $INPT_CurYear & ',5')
00200  |    	FileWrite($DatabaseDir & "\csv\Update_FactSheetDates.csv", $tout1)
00201  |    	FileClose($DatabaseDir & "\csv\Update_FactSheetDates.csv") ; Close the filehandle to release the file.
00202  |    	;FileMove(@ScriptDir & "\assets\ChartBuilder\public\Data\Backups\Update_FactSheetDates.csv", $DatabaseDir & "\csv\", 1)
00203  |    
00204  |    	_LogaInfo("Updated FactSheetDates CSV File with selected dates") ; Write to the logfile
00205  |    
00206  |    
00207  +-EndFunc   ;==>DetermineDates
00208    
00209  +-Func ClearLog()
00210  |    	FileDelete(@ScriptDir & "\AutoCharts.log")
00211  |    	_FileCreate(@ScriptDir & "\AutoCharts.log")
00212  |  +-	If @error = 0 Then
00213  |  |    		_GUIDisable($Form6, 0, 50)
00214  |  |    		_Metro_MsgBox($MB_SYSTEMMODAL, "Success", "Log file cleared.")
00215  |  |    		_GUIDisable($Form6)
00216  |  +-	EndIf
00217  |  +-	If @error = 1 Then
00218  |  |    		_GUIDisable($Form6, 0, 50)
00219  |  |    		_Metro_MsgBox(0, "Error", "There was an error with clearing the log.")
00220  |  |    		_GUIDisable($Form6)
00221  |  +-	EndIf
00222  |    
00223  +-EndFunc   ;==>ClearLog
00224    
00225    
00226    
00227  +-Func RunCSVConvert() ; Dynamically checks for funds with "-institutional.xlsx" files and converts those automatically as well.
00228  |    
00229  |  +-	For $a = 0 To (UBound($FamilySwitch) - 1) ; Loops through FundFamily Array
00230  |  |  +-		If $FamilySwitch[$a] <> "" Then
00231  |  |  |    			$CurrentFund = $FamilySwitch[$a]
00232  |  |  |    			GUICtrlSetData($UpdateLabel, "Updating the following Fund Factsheet: " & $CurrentFund)
00233  |  |  |    			_Metro_SetProgress($ProgressBar, 15)
00234  |  |  |    
00235  |  |  |    			_LogaInfo("~~~~~~~~~~~~ " & $CurrentFund & " CSV CONVERSION START ~~~~~~~~~~~~")     ; Write to the logfile
00236  |  |  |    
00237  |  |  |    
00238  |  |  |  +-			If $FundFamily = "Catalyst" Then
00239  |  |  |  |    				PullCatalystFundData()
00240  |  |  |  +-			EndIf
00241  |  |  |    
00242  |  |  |  +-			If $FundFamily = "Rational" Then
00243  |  |  |  |    				PullRationalFundData()
00244  |  |  |  +-			EndIf
00245  |  |  |    
00246  |  |  |  +-			If $FundFamily = "StrategyShares" Then
00247  |  |  |  |    				PullStrategySharesFundData()
00248  |  |  |  +-			EndIf
00249  |  |  |    
00250  |  |  |  +-			If Not FileCopy($DatabaseDir & "\fin_backup_files\" & $FundFamily & "\" & $CurrentFund & "\" & $CurrentFund & "*.xlsx", @ScriptDir & "/VBS_Scripts/") Then      ; grab .xlsx from current fund directory and move to /VBS_Scripts
00251  |  |  |  |    				_GUIDisable($Form1, 0, 50)
00252  |  |  |  |    				_Metro_MsgBox(0, "Error", "Could not copy backup file from " & $DatabaseDir & "\fin_backup_files\" & $FundFamily & "\" & $CurrentFund & "\" & $CurrentFund & "*.xlsx")
00253  |  |  |  |    				_GUIDisable($Form1)
00254  |  |  |  |    				_LogaError("Could not copy backup file from " & $DatabaseDir & "\fin_backup_files\" & $FundFamily & "\" & $CurrentFund & "\" & $CurrentFund & "*.xlsx")     ; Write to the logfile
00255  |  |  |  |    
00256  |  |  |  +-			EndIf
00257  |  |  |    
00258  |  |  |    			RunWait(@ComSpec & " /c " & @ScriptDir & "/VBS_Scripts/Excel_To_CSV_All_Worksheets.vbs " & $CurrentFund & ".xlsx", @TempDir, @SW_HIDE)     ;~ Runs command hidden, Converts Current Fund's .xlsx to .csv
00259  |  |  |    
00260  |  |  |    			GUICtrlSetData($UpdateLabel, $CurrentFund & " | ~~~~~~~~~~~~ " & $CurrentFund & " CSV CONVERSION START ~~~~~~~~~~~~")
00261  |  |  |    
00262  |  |  |    			_LogaInfo("Converted " & $CurrentFund & ".xlsx file to csv")     ; Write to the logfile
00263  |  |  |    
00264  |  |  |    			GUICtrlSetData($UpdateLabel, $CurrentFund & " | Converted " & $CurrentFund & ".xlsx file to csv")
00265  |  |  |    
00266  |  |  |  +-			If FileExists($DatabaseDir & "\fin_backup_files\" & $FundFamily & "\" & $CurrentFund & "\" & $CurrentFund & "-institutional.xlsx") Then  ; dynamically checks if Current Fund has institutional backupfile. If so, runs csv convert on both
00267  |  |  |  |    				RunCSVConvert4Institution()
00268  |  |  |  +-			EndIf
00269  |  |  |  +-			If FileExists($DatabaseDir & "\fin_backup_files\" & $FundFamily & "\" & $CurrentFund & "\" & $CurrentFund & "-brochure.xlsx") Then
00270  |  |  |  |    				RunCSVConvert4Brochure()
00271  |  |  |  +-			EndIf
00272  |  |  |  +-			If FileExists($DatabaseDir & "\fin_backup_files\" & $FundFamily & "\" & $CurrentFund & "\" & $CurrentFund & "-presentation.xlsx") Then
00273  |  |  |  |    				RunCSVConvert4Presentation()
00274  |  |  |  +-			EndIf
00275  |  |  |    
00276  |  |  |    
00277  |  |  |    
00278  |  |  |    			_Metro_SetProgress($ProgressBar, 25)
00279  |  |  |    
00280  |  |  |    
00281  |  |  |    
00282  |  |  |    
00283  |  |  |    			FileCopy(@ScriptDir & "/VBS_Scripts/*.csv", @ScriptDir & $CSVDataDir & "\" & $FundFamily & "\" & $CurrentFund & "\" & "*.csv", 1)       ; Move all .CSV back to Data folder and overwrite.
00284  |  |  |    			FileMove(@ScriptDir & "/VBS_Scripts/*.csv", $DatabaseDir & "\csv\" & $FundFamily & "\" & $CurrentFund & "\*.csv", 1)       ; Move all .CSV back to Data folder and overwrite.
00285  |  |  |    
00286  |  |  |    			_LogaInfo("Moved the " & $CurrentFund & ".csv files to the fund's InDesign Links folder in Dropbox") ; Write to the logfile
00287  |  |  |    			GUICtrlSetData($UpdateLabel, $CurrentFund & " | Moved the " & $CurrentFund & ".csv files to the fund's InDesign Links folder in Dropbox")
00288  |  |  |    			_Metro_SetProgress($ProgressBar, 30)
00289  |  |  |    
00290  |  |  |    
00291  |  |  |    			FileDelete(@ScriptDir & "/VBS_Scripts/*.xlsx")       ; deletes remaining .xlsx from conversion
00292  |  |  |    			_LogaInfo("Deleted remaining " & $CurrentFund & ".xlsx files from CSV Conversion directory") ; Write to the logfile
00293  |  |  |    			GUICtrlSetData($UpdateLabel, $CurrentFund & " | Deleted remaining " & $CurrentFund & ".xlsx files from CSV Conversion directory")
00294  |  |  |    			_Metro_SetProgress($ProgressBar, 55)
00295  |  |  |    
00296  |  |  +-		Else
00297  |  ^--|----			ContinueLoop
00298  |  |  +-		EndIf
00299  |  |    
00300  |  +-	Next
00301  |    
00302  +-EndFunc   ;==>RunCSVConvert
00303    
00304    
00305  +-Func RunCSVConvert4Institution() ; Dynamically checks for funds with "-institutional.xlsx" files and converts those automatically as well.
00306  |    
00307  |    	RunWait(@ComSpec & " /c " & @ScriptDir & "/VBS_Scripts/Excel_To_CSV_All_Worksheets.vbs " & $CurrentFund & "-institutional.xlsx", @TempDir, @SW_HIDE)     ;~ Runs command hidden, Converts Current Fund's INSTITUTIONAL.xlsx to .csv
00308  |    
00309  |    	_LogaInfo("Converted " & $CurrentFund & "-institutional.xlsx file to csv")     ; Write to the logfile
00310  |    	GUICtrlSetData($UpdateLabel, $CurrentFund & " | Converted " & $CurrentFund & "-institutional.xlsx file to csv")
00311  |    
00312  |    
00313  +-EndFunc   ;==>RunCSVConvert4Institution
00314    
00315    
00316    
00317  +-Func RunCSVConvert4Brochure() ; Dynamically checks for funds with "-brochure.xlsx" files and converts those automatically as well.
00318  |    
00319  |    	RunWait(@ComSpec & " /c " & @ScriptDir & "/VBS_Scripts/Excel_To_CSV_All_Worksheets.vbs " & $CurrentFund & "-brochure.xlsx", @TempDir, @SW_HIDE)     ;~ Runs command hidden, Converts Current Fund's INSTITUTIONAL.xlsx to .csv
00320  |    
00321  |    	_LogaInfo("Converted " & $CurrentFund & "-brochure.xlsx file to csv")     ; Write to the logfile
00322  |    	GUICtrlSetData($UpdateLabel, $CurrentFund & " | Converted " & $CurrentFund & "-brochure.xlsx file to csv")
00323  |    
00324  |    
00325  +-EndFunc   ;==>RunCSVConvert4Brochure
00326    
00327    
00328  +-Func RunCSVConvert4Presentation() ; Dynamically checks for funds with "-brochure.xlsx" files and converts those automatically as well.
00329  |    
00330  |    	RunWait(@ComSpec & " /c " & @ScriptDir & "/VBS_Scripts/Excel_To_CSV_All_Worksheets.vbs " & $CurrentFund & "-presentation.xlsx", @TempDir, @SW_HIDE)     ;~ Runs command hidden, Converts Current Fund's INSTITUTIONAL.xlsx to .csv
00331  |    
00332  |    	_LogaInfo("Converted " & $CurrentFund & "-presentation.xlsx file to csv")     ; Write to the logfile
00333  |    	GUICtrlSetData($UpdateLabel, $CurrentFund & " | Converted " & $CurrentFund & "-presentation.xlsx file to csv")
00334  |    
00335  |    
00336  +-EndFunc   ;==>RunCSVConvert4Presentation
00337    
00338    
00339    
00340    
00341  +-Func HTMLChartEditor() ; Edits index_TEMPLATE.html file to include current fund's chart .js file
00342  |    	Local $file = @ScriptDir & "\assets\ChartBuilder\public\index_TEMPLATE.html"
00343  |    	Local $text = FileRead($file)
00344  |    
00345  |    	$tout1 = StringReplace($text, '<script src="/scripts/CHANGEME.js"></script>', '<script src="/scripts/' & $CurrentFund & '.js"></script>')
00346  |    	FileWrite(@ScriptDir & "\assets\ChartBuilder\public\index.html", $tout1)
00347  |    
00348  |    	_LogaInfo("~~~~~~~~~~~~ " & $CurrentFund & " CHART GENERATION START ~~~~~~~~~~~~") ; Write to the logfile
00349  |    	GUICtrlSetData($UpdateLabel, $CurrentFund & " | ~~~~~~~~~~~~ " & $CurrentFund & " CHART GENERATION START ~~~~~~~~~~~~")
00350  |    
00351  |    	_LogaInfo("Created HTML file for " & $CurrentFund & " chart generation") ; Write to the logfile
00352  |    	GUICtrlSetData($UpdateLabel, $CurrentFund & " | Created HTML file for " & $CurrentFund & " chart generation")
00353  |    
00354  |    	_LogaInfo("Initializing Local Server for amCharts") ; Write to the logfile
00355  |    	GUICtrlSetData($UpdateLabel, $CurrentFund & " | Initializing Local Server for amCharts")
00356  |    
00357  |    
00358  +-EndFunc   ;==>HTMLChartEditor
00359    
00360    
00361    
00362    
00363  +-Func CreateCharts()
00364  |  +-	For $a = 0 To (UBound($FamilySwitch) - 1)    ; Loops through FundFamily Array
00365  |  |  +-		If $FamilySwitch[$a] <> "" Then
00366  |  |  |    			$CurrentFund = $FamilySwitch[$a]
00367  |  |  |    			Call("HTMLChartEditor")
00368  |  |  |    			RunWait(@ComSpec & " /c node --unhandled-rejections=strict server.js", @ScriptDir & "/assets/ChartBuilder/", @SW_HIDE) ;~ Runs local server to create current fund's amcharts svgs.
00369  |  |  |    			;RunWait(@ComSpec & " /c node server.js", @ScriptDir & "/assets/ChartBuilder/") ;~ Runs local server to create current fund's amcharts svgs.
00370  |  |  |    			_Metro_SetProgress($ProgressBar, 70)
00371  |  |  |    
00372  |  |  |    			_LogaInfo($CurrentFund & " charts generated in SVG format using amCharts") ; Write to the logfile
00373  |  |  |    			GUICtrlSetData($UpdateLabel, $CurrentFund & " | Charts generated in SVG format using amCharts")
00374  |  |  |    
00375  |  |  |    
00376  |  |  |    			FileDelete(@ScriptDir & "\assets\ChartBuilder\public\index.html")  ; ~ Deletes index.html file that was created in Func HTMLChartEditor to keep from editing the same file.
00377  |  |  |    			FileMove(@ScriptDir & "/assets/ChartBuilder/*.svg", $DatabaseDir & "\images\charts\" & $FundFamily & "\" & $CurrentFund & "\*.svg", 1)   ; Move all .SVG to Database
00378  |  |  |    			_Metro_SetProgress($ProgressBar, 92)
00379  |  |  |    
00380  |  |  |    			_LogaInfo($CurrentFund & " charts moved to the funds InDesign Links folder") ; Write to the logfile
00381  |  |  |    			GUICtrlSetData($UpdateLabel, $CurrentFund & " | Charts moved to the funds InDesign Links folder")
00382  |  |  |    
00383  |  |  |    
00384  |  |  +-		Else
00385  |  ^--|----			ContinueLoop
00386  |  |  +-		EndIf
00387  |  |    		_Metro_SetProgress($ProgressBar, 100)
00388  |  |    
00389  |  +-	Next
00390  +-EndFunc   ;==>CreateCharts
00391    
00392  +-Func RunExpenseRatios()
00393  |  +-	If $FundFamily = "Catalyst" Then
00394  |  |    		GUICtrlSetData($UpdateLabel, "Updating Catalyst Expense Ratios")
00395  |  |    		_Metro_SetProgress($ProgressBar, 60)
00396  |  |    
00397  |  |    		FileCopy($DatabaseDir & "\fin_backup_files\" & $FundFamily & "\Catalyst_ExpenseRatios.xlsx", @ScriptDir & "/VBS_Scripts/")       ; grab Expense Ratio .xlsx from Catalyst Data Directory
00398  |  |    		RunWait(@ComSpec & " /c " & @ScriptDir & "/VBS_Scripts/Excel_To_CSV_All_Worksheets.vbs Catalyst_ExpenseRatios.xlsx", @TempDir, @SW_HIDE)         ;~ Runs command hidden, Converts Current Fund's .xlsx to .csv
00399  |  |    
00400  |  |    		_LogaInfo("~~~~~~~~~~~~ Updating Catalyst Expense Ratios ~~~~~~~~~~~~")     ; Write to the logfile
00401  |  |    		GUICtrlSetData($UpdateLabel, "Updating Catalyst Expense Ratios")
00402  |  |    
00403  |  |    		_LogaInfo("Updated Catalyst Expense Ratios")         ; Write to the logfile
00404  |  |    
00405  |  |    		GUICtrlSetData($UpdateLabel, "Updated Catalyst Expense Ratios")
00406  |  |    		FileMove(@ScriptDir & "/VBS_Scripts/Catalyst_ExpenseRatios.csv", $DatabaseDir & "\csv\" & $FundFamily & "\Catalyst_ExpenseRatios.csv", 1)           ; Move all .CSV back to Data folder and overwrite.
00407  |  |    		FileDelete(@ScriptDir & "/VBS_Scripts/*.xlsx")           ; deletes remaining .xlsx from conversion
00408  |  |    
00409  |  |    
00410  |  +-	EndIf
00411  |  +-	If $FundFamily = "Rational" Then
00412  |  |    		GUICtrlSetData($UpdateLabel, "Updating Rational Expense Ratios")
00413  |  |    		_Metro_SetProgress($ProgressBar, 60)
00414  |  |    
00415  |  |    		FileCopy($DatabaseDir & "\fin_backup_files\" & $FundFamily & "\Rational_ExpenseRatios.xlsx", @ScriptDir & "/VBS_Scripts/")       ; grab Expense Ratio .xlsx from Rational Data Directory
00416  |  |    		RunWait(@ComSpec & " /c " & @ScriptDir & "/VBS_Scripts/Excel_To_CSV_All_Worksheets.vbs Rational_ExpenseRatios.xlsx", @TempDir, @SW_HIDE)         ;~ Runs command hidden, Converts Current Fund's .xlsx to .csv
00417  |  |    
00418  |  |    		_LogaInfo("~~~~~~~~~~~~ Updating Rational Expense Ratios ~~~~~~~~~~~~")         ; Write to the logfile
00419  |  |    		GUICtrlSetData($UpdateLabel, "Updating Rational Expense Ratios")
00420  |  |    
00421  |  |    		_LogaInfo("Updated Rational Expense Ratios")         ; Write to the logfile
00422  |  |    
00423  |  |    		GUICtrlSetData($UpdateLabel, "Updated Rational Expense Ratios")
00424  |  |    		FileMove(@ScriptDir & "/VBS_Scripts/Rational_ExpenseRatios.csv", $DatabaseDir & "\csv\" & $FundFamily & "\Rational_ExpenseRatios.csv", 1)           ; Move all .CSV back to Data folder and overwrite.
00425  |  |    		FileDelete(@ScriptDir & "/VBS_Scripts/*.xlsx")           ; deletes remaining .xlsx from conversion
00426  |  |    
00427  |  |    
00428  |  +-	EndIf
00429  |    
00430  |    	_Metro_SetProgress($ProgressBar, 100)
00431  |    
00432  +-EndFunc   ;==>RunExpenseRatios
00433    
00434  +-Func CreateFactSheetArchive()
00435  |    	Local $Zip, $myfile
00436  |    
00437  |    	; Create a constant variable in Local scope of the message to display in FileSelectFolder.
00438  |    	Local Const $sMessage = "Select Save Location"
00439  |    
00440  |    	; Display an open dialog to select a file.
00441  |    	Local $sFileSelectFolder = FileSelectFolder($sMessage, "")
00442  |  +-	If @error Then
00443  |  |    		; Display the error message.
00444  |  |    
00445  |  |    		_GUIDisable($Form1, 0, 50)
00446  |  |    		_Metro_MsgBox(0, "Error", "No folder was selected.")
00447  |  |    		_GUIDisable($Form1)
00448  |  |    
00449  |  |    
00450  |  +-	Else
00451  |  |    		$Zip = _Zip_Create($sFileSelectFolder & "\FactSheets_" & $Select_Quarter & "-" & $INPT_CurYear & ".zip") ;Create The Zip File. Returns a Handle to the zip File
00452  |  |    		_Zip_AddFolder($Zip, $DatabaseDir & "\fin_backup_files\", 4) ;Add a folder to the zip file (files/subfolders will be added)
00453  |  |    		_Zip_AddFolder($Zip, $DropboxDir & "\Marketing Team Files\Marketing Materials\AutoCharts&Tables\FactSheets\", 4) ;Add a folder to the zip file (files/subfolders will be added)
00454  |  |    
00455  |  |    		_GUIDisable($Form1, 0, 50)
00456  |  |    		_Metro_MsgBox(0, "Items in Zip", "Succesfully added " & _Zip_Count($Zip) & " items in " & $Zip)
00457  |  |    		_GUIDisable($Form1)
00458  |  |    
00459  |  |    		_LogaInfo("Created Factsheet Archive at " & $Zip) ; Write to the logfile
00460  |  |    
00461  |  +-	EndIf
00462  |    
00463  |    
00464  +-EndFunc   ;==>CreateFactSheetArchive
00465    
00466    
00467    #EndRegion ### Start Main Functions Region

======================
=== xref reports =====
======================

== User functions =================================================================================================
                          Func
Function name             Row     Referenced at Row(s)
========================= ====== ==================================================================================
CheckForSettingsMigrate   00114  00130
CheckForUpdate            00122 
ClearLog                  00209 
CreateCharts              00363 
CreateFactSheetArchive    00434 
DetermineDates            00135 
HTMLChartEditor           00341  00367
RunCSVConvert             00227 
RunCSVConvert4Brochure    00317  00270
RunCSVConvert4Institution  00305  00267
RunCSVConvert4Presentation  00328  00273
RunExpenseRatios          00392 

#### indicates that this specific variable only occurs one time in the script.
---- indicates that this specific variable isn't declared with Dim/Local/Global/Const.

== Variables ======================================================================================================
Variable name             Dim   Used in Row(s)
========================= ===== ===================================================================================
$BTN_Cancel               ----- 00049
$BTN_Save                 ----- 00048
$BTN_SelectDBPath         ----- 00050
$CSVDataDir               ----- 00061 00283
$CurrentFund              ----- 00034 00231 00232 00235 00250 00252 00254 00258 00260 00262 00264 00266 00269 00272 
                                00283 00284 00286 00287 00292 00293 00307 00309 00310 00319 00321 00322 00330 00332 
                                00333 00345 00348 00349 00351 00352 00355 00366 00372 00373 00377 00380 00381
$DatabaseDir              ----- 00063 00165 00166 00171 00175 00180 00185 00190 00195 00200 00201 00250 00252 00254 
                                00266 00269 00272 00284 00377 00397 00406 00415 00424 00452
$DayNumber                ----- 00139 00145 00149 00153 00157 00179 00184
$DropboxDir               ----- 00062 00063 00453
$FamilySwitch             ----- 00032 00229 00230 00231 00364 00365 00366
$Form1                    ----- 00251 00253 00445 00447 00455 00457
$Form6                    ----- 00213 00215 00218 00220
$FundFamily               ----- 00039 00238 00242 00246 00250 00252 00254 00266 00269 00272 00283 00284 00377 00393 
                                00397 00406 00411 00415 00424
$GUI_UserSettings         ----- 00046
$INPT_CurYear             ----- 00038 00137 00163 00179 00184 00189 00194 00199 00451
$INPT_DropboxFolder       ----- 00047
$INPT_Name                ----- 00036
$MB_SYSTEMMODAL           ----- 00214
$MonthNumber              ----- 00140 00144 00148 00152 00156 00179 00199
$ProgressBar              ----- 00233 00278 00288 00294 00370 00378 00387 00395 00413 00430
$QtrToMonth               ----- 00138 00143 00147 00151 00155 00184 00194
$Radio_Q1                 ----- 00052
$Radio_Q2                 ----- 00053
$Radio_Q3                 ----- 00054
$Radio_Q4                 ----- 00055
$Select_Quarter           ----- 00037 00136 00142 00146 00150 00154 00163 00189 00451
$Select_Theme             ----- 00041
$UpdateLabel              ----- 00232 00260 00264 00287 00293 00310 00322 00333 00349 00352 00355 00373 00381 00394 
                                00401 00405 00412 00419 00423
$Zip                      ----- 00435 00451 00452 00453 00456 00459
$a                        ----- 00229 00230 00231 00364 00365 00366
$aCatalystCheck           ----- 00028
$aRationalCheck           ----- 00029
$aStrategyCheck           ----- 00030
$bDBVerified              ----- 00040
$file                     ----- 00171 00172 00177 00182 00187 00192 00197 00342 00343
$ini                      ----- 00035 00036 00037 00038 00040 00041 00062 00136 00137
$myfile                   ----- 00435
$sFileSelectFolder        ----- 00441 00451
$sMessage                 ----- 00438 00441
$text                     ----- 00172 00174 00177 00179 00182 00184 00187 00189 00192 00194 00197 00199 00343 00345
$tout1                    ----- 00174 00175 00179 00180 00184 00185 00189 00190 00194 00195 00199 00200 00345 00346
@CRLF                     ----- 00118 00174 00179 00184 00189 00194
@ComSpec                  ----- 00258 00307 00319 00330 00368 00398 00416
@SW_HIDE                  ----- 00258 00307 00319 00330 00368 00398 00416
@ScriptDir                ----- 00115 00116 00123 00210 00211 00250 00258 00283 00284 00291 00307 00319 00330 00342 
                                00346 00368 00376 00377 00397 00398 00406 00407 00415 00416 00424 00425
@TempDir                  ----- 00258 00307 00319 00330 00398 00416
@error                    ----- 00212 00217 00442
